{"name": "test_buy_product_1", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "@allure.description(\"Test buy product 1\")\n    def test_buy_product_1():\n    \n        chrome_options = Options()\n        chrome_options.add_experimental_option('excludeSwitches', ['enable-logging'])\n        chrome_options.add_experimental_option('detach', True)\n        service = Service(executable_path='C:\\\\Users\\\\user\\\\Downloads\\\\data for work\\\\pycharm_projects\\\\ProjectsPy\\\\resource\\\\chromedriver.exe')\n        driver = webdriver.Chrome(service=service, options=chrome_options)\n        driver.maximize_window()\n    \n    \n        print(\"### start test // buy deck ###\")\n        url = 'https://www.skvot.com/'\n        driver.get(url)\n    \n        main = MainPage(driver)\n        main.add_product_1_to_cart()\n    \n        cart = CartPage(driver)\n>       cart.buy_product()\n\ntest_buy_product.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\pages\\cart_page.py:176: in buy_product\n    self.click_cart_clean_button()\n..\\..\\pages\\cart_page.py:139: in click_cart_clean_button\n    self.get_cart_clean_button().click()\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\pages\\cart_page.py:91: in get_cart_clean_button\n    return WebDriverWait(self.driver, 30).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"3afdcaf426e9a57b39a5b3c34b16e402\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x000001E57FD57B00>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "description": "Test buy product 1", "steps": [{"name": "Add product 1 to cart", "status": "passed", "start": 1755015605508, "stop": 1755015623739}, {"name": "Buy product", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \n\n", "trace": "  File \"C:\\Users\\user\\PycharmProjects\\Selenium_Skvot_UI_Autotests\\pages\\cart_page.py\", line 176, in buy_product\n    self.click_cart_clean_button()\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^\n  File \"C:\\Users\\user\\PycharmProjects\\Selenium_Skvot_UI_Autotests\\pages\\cart_page.py\", line 139, in click_cart_clean_button\n    self.get_cart_clean_button().click()\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~^^\n  File \"C:\\Users\\user\\PycharmProjects\\Selenium_Skvot_UI_Autotests\\pages\\cart_page.py\", line 91, in get_cart_clean_button\n    return WebDriverWait(self.driver, 30).until(\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n        EC.element_to_be_clickable((By.XPATH, self.cart_clean_button)))\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\user\\PycharmProjects\\Selenium_Skvot_UI_Autotests\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 138, in until\n    raise TimeoutException(message, screen, stacktrace)\n"}, "start": 1755015623739, "stop": 1755015669353}], "attachments": [{"name": "stdout", "source": "dad2c991-89de-4ff8-8829-4c54ed5f70de-attachment.txt", "type": "text/plain"}], "start": 1755015598166, "stop": 1755015669375, "uuid": "aad1c107-90ab-4b6f-92fa-fb16626ef387", "historyId": "6cdaed3b18b76e8ab048a47d7909d97a", "testCaseId": "6cdaed3b18b76e8ab048a47d7909d97a", "fullName": "test_buy_product#test_buy_product_1", "labels": [{"name": "suite", "value": "test_buy_product"}, {"name": "host", "value": "WIN-3JK580LDE7T"}, {"name": "thread", "value": "17936-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_buy_product"}], "titlePath": ["test_buy_product.py"]}